//**********s********************************************************************
//    RC Module
//    NeuroMatrix(r) NM6403 Software
//
//    Image Processing Library 
//    (C-callable functions)
//
//    File:               SobelH.asm
//    Contents:           Routines for Horizontal Sobel operator calculation.
//    Software design:    S.Mushkaev
//    
//    Start date:         14oct99
//    Release date:       22.05.02
//
//
//********************************************************************************


data ".data_sobel_weights101v"
    global _sobel_weights101v: long[30] = (	
							0000000000000000000000000000000000000000000000000000000000110001bl, 
							0000000000000000000000000000000000000000000000000000000011000100bl, 
							0000000000000000000000000000000000000000000000000000001100010000bl,
							0000000000000000000000000000000000000000000000000000110001000000bl,
							0000000000000000000000000000000000000000000000000011000100000000bl, 
							0000000000000000000000000000000000000000000000001100010000000000bl,
							0000000000000000000000000000000000000000000000110001000000000000bl,
							0000000000000000000000000000000000000000000011000100000000000000bl,
							0000000000000000000000000000000000000000001100010000000000000000bl,
							0000000000000000000000000000000000000000110001000000000000000000bl,
							0000000000000000000000000000000000000011000100000000000000000000bl,
							0000000000000000000000000000000000001100010000000000000000000000bl,
							0000000000000000000000000000000000110001000000000000000000000000bl,
							0000000000000000000000000000000011000100000000000000000000000000bl,
							0000000000000000000000000000001100010000000000000000000000000000bl, 
							0000000000000000000000000000110001000000000000000000000000000000bl, 
							0000000000000000000000000011000100000000000000000000000000000000bl,
							0000000000000000000000001100010000000000000000000000000000000000bl,
							0000000000000000000000110001000000000000000000000000000000000000bl, 
							0000000000000000000011000100000000000000000000000000000000000000bl,
							0000000000000000001100010000000000000000000000000000000000000000bl,
							0000000000000000110001000000000000000000000000000000000000000000bl,
							0000000000000011000100000000000000000000000000000000000000000000bl,
							0000000000001100010000000000000000000000000000000000000000000000bl,
							0000000000110001000000000000000000000000000000000000000000000000bl,
							0000000011000100000000000000000000000000000000000000000000000000bl,
							0000001100010000000000000000000000000000000000000000000000000000bl,
							0000110001000000000000000000000000000000000000000000000000000000bl,
							0011000100000000000000000000000000000000000000000000000000000000bl,
							1100010000000000000000000000000000000000000000000000000000000000bl
							);
end ".data_sobel_weights101v";

data ".data_sobel_weights121v"							
	global _sobel_weights121v: long[30] = (	
							0000000000000000000000000000000000000000000000000000000000111011bl, 
							0000000000000000000000000000000000000000000000000000000011101100bl, 
							0000000000000000000000000000000000000000000000000000001110110000bl,
							0000000000000000000000000000000000000000000000000000111011000000bl,
							0000000000000000000000000000000000000000000000000011101100000000bl, 
							0000000000000000000000000000000000000000000000001110110000000000bl,
							0000000000000000000000000000000000000000000000111011000000000000bl,
							0000000000000000000000000000000000000000000011101100000000000000bl,
							0000000000000000000000000000000000000000001110110000000000000000bl,
							0000000000000000000000000000000000000000111011000000000000000000bl,
							0000000000000000000000000000000000000011101100000000000000000000bl,
							0000000000000000000000000000000000001110110000000000000000000000bl,
							0000000000000000000000000000000000111011000000000000000000000000bl,
							0000000000000000000000000000000011101100000000000000000000000000bl,
							0000000000000000000000000000001110110000000000000000000000000000bl, 
							0000000000000000000000000000111011000000000000000000000000000000bl, 
							0000000000000000000000000011101100000000000000000000000000000000bl,
							0000000000000000000000001110110000000000000000000000000000000000bl,
							0000000000000000000000111011000000000000000000000000000000000000bl, 
							0000000000000000000011101100000000000000000000000000000000000000bl,
							0000000000000000001110110000000000000000000000000000000000000000bl,
							0000000000000000111011000000000000000000000000000000000000000000bl,
							0000000000000011101100000000000000000000000000000000000000000000bl,
							0000000000001110110000000000000000000000000000000000000000000000bl,
							0000000000111011000000000000000000000000000000000000000000000000bl,
							0000000011101100000000000000000000000000000000000000000000000000bl,
							0000001110110000000000000000000000000000000000000000000000000000bl,
							0000111011000000000000000000000000000000000000000000000000000000bl,
							0011101100000000000000000000000000000000000000000000000000000000bl,
							1110110000000000000000000000000000000000000000000000000000000000bl
							);
end ".data_sobel_weights121v";
							


begin ".text_sobel"


global _filter3v: label;
<_filter3v>

.branch;
    ar5 = ar7 - 2;
	
	push ar0,gr0 with gr7= false;  
	push ar1,gr1 with gr7++;  			
	push ar2,gr2 with gr7++;  			
	push ar3,gr3 with gr2=gr7;			// gr2 = 2;
	push ar4,gr4;
	push ar5,gr5;
	push ar6,gr6;
	
    sb  = 0aaaaaaaah;					// 32 rows
	nb1 = 080008000h;					// 4 cols
	
    ar0 = [--ar5];						// [source buffer];
    ar4 = [--ar5]; 						// [result buffer]
    gr7 = [--ar5];						// [width]
	gr6 = [--ar5] 	with gr0=gr7>>1;	// [height]
	ar5 = [--ar5] 	with gr4=gr7>>1;	// [weights] for vram
	rep 30 ram = [ar5++];
					with gr7>>=2;		// width in 64-bit words
	gr3 = 30 		with gr7--;
	ar1 = gr7;
	
	<NextSliceOf30>
		gr1 = ar0;						// point to start of source slice
		gr5 = ar4; 						// point to start of result slice
		gr7 = ar1;						// restore widthIn64
		ar0 = gr1 with gr1+=gr2;		// get next source column address
		ar4 = gr5 with gr5+=gr2;		// get next result column address
		rep 30 wfifo = [ar0++gr0];
		push   ar0,gr0;	// save position of source [ar0] for start point in next slice
		rep 2  wfifo = [ar0++gr0], ftw,wtw;
		rep 30 					with vsum , ram, 0;
		rep 30 [ar4++gr4]=afifo;
		push   ar4,gr4;	// save result position [ar4]  for start point in next slice
		with gr7--;
		<NextColumnOf30>
			ar0 = gr1 with gr1+=gr2 noflags; 
			ar4 = gr5 with gr5+=gr2 noflags;
			rep 32 wfifo = [ar0++gr0], ftw,wtw;
		if > delayed goto NextColumnOf30 with gr7--;		
			rep 30 					with vsum , ram, 0;
			rep 30 [ar4++gr4]=afifo;
	
		pop ar4,gr4;				// restore result position in slice
		pop ar0,gr0 with gr6-=gr3;	// restore source position in slice
		
	if > delayed goto NextSliceOf30;
		nul;
		nul;
		
    pop ar6,gr6;
    pop ar5,gr5;
	pop ar4,gr4;
	pop ar3,gr3;
	pop ar2,gr2;
	pop ar1,gr1;
	pop ar0,gr0;
	
    return;
end ".text_sobel";
